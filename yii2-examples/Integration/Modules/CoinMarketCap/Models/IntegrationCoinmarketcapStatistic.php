<?php

namespace App\Modules\Integration\Modules\CoinMarketCap\Models;

use Minexsystems\Satoshi\Behaviors\SatoshiBehavior;
use Minexsystems\Satoshi\Satoshi;
use Minexsystems\Satoshi\Validators\SatoshiValidator;
use App\Modules\Integration\Modules\CoinMarketCap\Models\Query\CoinmarketcapStatisticQuery;

/**
 * @property \Minexsystems\Satoshi\Satoshi $priceUsd
 * @property \Minexsystems\Satoshi\Satoshi $priceBtc
 * @property \Minexsystems\Satoshi\Satoshi $dayVolumeUsd
 * @property \Minexsystems\Satoshi\Satoshi $marketCapUsd
 * @property \Minexsystems\Satoshi\Satoshi $availableSupply
 * @property \Minexsystems\Satoshi\Satoshi $totalSupply
 * @property \Minexsystems\Satoshi\Satoshi $maxSupply
 * @property \Minexsystems\Satoshi\Satoshi $percentChangeHour
 * @property \Minexsystems\Satoshi\Satoshi $percentChangeDay
 * @property \Minexsystems\Satoshi\Satoshi $percentChangeWeek
 */
class IntegrationCoinmarketcapStatistic extends \App\Modules\Database\IntegrationCoinmarketcapStatistic
{

    public function behaviors(): array 
    {
        return [
            [
                'class' => SatoshiBehavior::class,
                'fields' => [
                    'priceUsd', 'priceBtc', 'priceEth', 'dayVolumeUsd', 'marketCapUsd', 'availableSupply', 'totalSupply', 'maxSupply',
                    'percentChangeHour','percentChangeDay','percentChangeWeek'
                ]
            ],
        ];
    }
    /**
     * @inheritdoc
     */
    public function rules() 
    {
        return [
            [
                [
                    'rank',
                    'priceUsd',
                    'priceBtc',
                    'priceEth',
                    'dayVolumeUsd',
                    'marketCapUsd',
                    'availableSupply',
                    'totalSupply',
                    'maxSupply',
                    'percentChangeHour',
                    'percentChangeDay',
                    'percentChangeWeek',
                    'lastUpdated'
                ],
                'required'
            ],
            [
                [
                    'priceUsd',
                    'priceBtc',
                    'priceEth',
                    'dayVolumeUsd',
                    'marketCapUsd',
                    'availableSupply',
                    'totalSupply',
                    'maxSupply',
                    'percentChangeHour',
                    'percentChangeDay',
                    'percentChangeWeek'
                ],
                SatoshiValidator::class
            ],
            [
                ['lastUpdated', 'createdAt'], 'datetime'
            ],
        ];
    }

    public function beforeValidate() 
    {
        $this->lastUpdated = \Yii::$app->formatter->asDatetime($this->lastUpdated);
        $this->createdAt = \Yii::$app->formatter->asDatetime($this->createdAt);
        
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
    
    /**
     * @return CoinmarketcapStatisticQuery
     */
    public static function find(): CoinmarketcapStatisticQuery
    {
        return new CoinmarketcapStatisticQuery(get_called_class());
    }
    
    public static function findMarketCupPrice()
    {
        return self::find()
            ->orderBy('lastUpdated')
            ->limit(1)
            ->asArray()
            ->one();
    }

    
    /**
     * @return array
     */
    public static function getMinMaxPrices()
    {
        $sums = self::find()->minMaxBtc()->asArray()->one();
        
        return [
            'minBtc' => new Satoshi(!is_null($sums['minPriceBtc']) ? $sums['minPriceBtc'] : 0),
            'maxBtc' => new Satoshi(!is_null($sums['maxPriceBtc']) ? $sums['maxPriceBtc'] : 0),
        ];
    }
}